{"version":3,"file":"component---src-pages-shipment-form-tsx-49c31876117135798346.js","mappings":"yTACO,IAAMA,EAAa,WAqBxB,SAAAA,EAAYC,EAAcC,GACxBC,KAAKC,SAAWH,EAChBE,KAAKE,cAAe,EACpBF,KAAKG,OAASJ,EACdC,KAAKI,aAAe,EACpBJ,KAAKK,aAAe,EACpBL,KAAKM,wBAAqB,EAC1BN,KAAKO,eAAiB,CAAC,EACvBP,KAAKQ,OAAS,KACdR,KAAKS,WAAa,GAClBT,KAAKU,iBAAmB,SAC1B,CAAC,IAAAC,EAAAd,EAAAe,UAQA,OARAD,EAUME,kBAAP,SAAyBC,EAAaC,GAKpC,YAL8D,IAA1BA,IAAAA,EAA6B,MACjEf,KAAKS,WAAaK,EACS,iBAAhBC,IACTf,KAAKO,eAAeS,iBAAmBD,GAElCf,IACT,EAACW,EAEMM,kBAAP,SAAyBH,EAA+CC,GAKtE,YALgG,IAA1BA,IAAAA,EAA6B,MACnGf,KAAKU,iBAAmBI,EACG,iBAAhBC,IACTf,KAAKO,eAAeS,iBAAmBD,GAElCf,IACT,EAACW,EAEMO,QAAP,SAAeJ,GACb,GAAoB,WAAhBd,KAAKG,OAGP,MAAMgB,MAAM,kCAFZnB,KAAKQ,OAASM,CAIlB,EAACH,EAEMS,cAAP,SAAqBN,EAAcC,GAKjC,YAL2D,IAA1BA,IAAAA,EAA6B,MAC9Df,KAAKE,aAAeY,EACO,iBAAhBC,IACTf,KAAKO,eAAec,mBAAqBN,GAEpCf,IACT,EAACW,EAEMW,QAAP,SAAeR,EAAoBC,GAKjC,YAL2D,IAA1BA,IAAAA,EAA6B,MAC9Df,KAAKG,OAASW,EACa,iBAAhBC,IACTf,KAAKO,eAAegB,aAAeR,GAE9Bf,IACT,EAACW,EAEMa,aAAP,SAAoBV,EAAaC,GAK/B,YALyD,IAA1BA,IAAAA,EAA6B,MAC5Df,KAAKI,YAAcU,EACQ,iBAAhBC,IACTf,KAAKO,eAAekB,kBAAoBV,GAEnCf,IACT,EAACW,EAEMe,aAAP,SAAoBZ,EAAaC,GAK/B,YALyD,IAA1BA,IAAAA,EAA6B,MAC5Df,KAAKK,YAAcS,EACQ,iBAAhBC,IACTf,KAAKO,eAAeoB,kBAAoBZ,GAEnCf,IACT,EAACW,EAEMiB,oBAAP,SAA2Bd,EAAaC,GAKtC,YALgE,IAA1BA,IAAAA,EAA6B,MACnEf,KAAKM,mBAAqBQ,EACC,iBAAhBC,IACTf,KAAKO,eAAesB,yBAA2Bd,GAE1Cf,IACT,EAACW,EAEMmB,UAAP,WACE,OAAO9B,KAAKM,kBACd,EAACK,EAEMoB,cAAP,SAAwBC,GACtB,UAAWA,GAAK,GAAQhC,KAAKG,OAC3B,MAAO,CAAE8B,SAAS,EAAMC,aAAa,2BAA4BlC,KAAKG,OAAM,oBAAoB6B,GAElG,cAAeA,GACb,IAAK,SACH,QAAgC,IAA5BhC,KAAKM,oBAA2CN,KAAKM,mBAAoB6B,KAAM,CAEjF,IAD0BnC,KAAK8B,YAAaK,KAAKH,EAAMI,QAErD,MAAO,CAAEH,SAAS,EAAMC,aAAa,WAAYlC,KAAKC,SAE1D,CACA,IAA0B,IAAtBD,KAAKI,aAAsB4B,EAAMK,OAASrC,KAAKI,YACjD,MAAO,CAAE6B,SAAS,EAAMC,aAAa,aAAclC,KAAKC,SAAQ,wBAAwBD,KAAKI,aAE/F,IAA0B,IAAtBJ,KAAKK,aAAsB2B,EAAMK,OAASrC,KAAKK,YACjD,MAAO,CAAE4B,SAAS,EAAMC,aAAa,aAAclC,KAAKC,SAAQ,0BAA0BD,KAAKK,aAEjG,MACF,IAAK,SACH,IAA0B,IAAtBL,KAAKI,aAAsB4B,EAAQhC,KAAKI,YAC1C,MAAO,CAAE6B,SAAS,EAAMC,aAAa,YAAalC,KAAKC,SAAQ,wBAAwBD,KAAKI,aAE9F,IAA0B,IAAtBJ,KAAKK,aAAsB2B,EAAQhC,KAAKK,YAC1C,MAAO,CAAE4B,SAAS,EAAMC,aAAa,YAAalC,KAAKC,SAAQ,0BAA0BD,KAAKK,aAEhG,MACF,IAAK,SACH,GAAIiC,MAAMC,QAAQP,GAAQ,CACxB,GAA8B,YAA1BhC,KAAKU,kBAAkCsB,EAAMQ,OAAOC,UAAcA,IAAOzC,KAAKU,mBAChF,MAAO,CAAEuB,SAAS,EAAMC,aAAa,2BAA4BlC,KAAKG,OAAM,oBAAoB6B,GAElG,IAA0B,IAAtBhC,KAAKI,aAAsB4B,EAAMK,OAASrC,KAAKI,YACjD,MAAO,CAAE6B,SAAS,EAAMC,aAAa,aAAclC,KAAKC,SAAQ,wBAAwBD,KAAKI,aAE/F,IAA0B,IAAtBJ,KAAKK,aAAsB2B,EAAMK,OAASrC,KAAKK,YACjD,MAAO,CAAE4B,SAAS,EAAMC,aAAa,aAAclC,KAAKC,SAAQ,0BAA0BD,KAAKK,YAEnG,CACA,GAAoB,OAAhBL,KAAKQ,OACP,OAAOR,KAAK+B,cAAc/B,KAAKQ,QAMrC,MAAO,CAAEyB,SAAS,EAAOC,aAAc,GACzC,GAACQ,EAAAA,EAAAA,GAAA7C,EAAA,EAAA8C,IAAA,aAAAC,IA3HD,WACE,OAAO5C,KAAKE,YACd,GAAC,CAAAyC,IAAA,WAAAC,IAED,WACE,OAAO5C,KAAKS,UACd,KAACZ,CAAA,CAxCuB,GCiBnB,MAAMgD,EAAe,ICdD,WAGzB,SAAAC,EAAYC,GACV/C,KAAKgD,SAAWD,CAClB,CAIC,OAJAL,EAAAA,EAAAA,GAAAI,EAAA,EAAAH,IAAA,MAAAC,IAED,WACE,OAAO5C,KAAKgD,QACd,KAACF,CAAA,CATwB,GDcC,CAA0C,CACpEG,UAAW,IAAIpD,EAAc,YAAa,UACvCuB,eAAc,GACdM,aAAa,GACbF,aAAa,IAChB0B,WAAY,IAAIrD,EAAc,aAAc,UACzCuB,eAAc,GACdI,aAAa,IAChB2B,SAAU,IAAItD,EAAc,WAAY,UACrCuB,eAAc,GACdM,aAAa,GACbF,aAAa,IAChB4B,MAAO,IAAIvD,EAAc,QAAS,UAC/BuB,eAAc,GACdQ,oBAAoB,8BACvByB,YAAa,IAAIxD,EAAc,cAAe,UAC3CuB,eAAc,GACdQ,oBAAoB,oBACvB0B,QAAS,IAAIzD,EAAc,UAAW,UACnCuB,eAAc,GACdI,aAAa,IAChB+B,MAAO,IAAI1D,EAAc,QAAS,UAC/BuB,eAAc,GACdI,aAAa,IAChBgC,KAAM,IAAI3D,EAAc,OAAQ,UAC7BuB,eAAc,GACdI,aAAa,IAChBiC,OAAQ,IAAI5D,EAAc,SAAU,UACjCuB,eAAc,GACdI,aAAa,KAChBkC,MAAO,IAAI7D,EAAc,QAAS,UAC/BuB,eAAc,GACdI,aAAa,IAChBmC,UAAW,IAAI9D,EAAc,YAAa,UACvCuB,eAAc,GACdI,aAAa,IAChBoC,QAAS,IAAI/D,EAAc,UAAW,UACnCuB,eAAc,GACdQ,oBAAoB,mBE3ClB,IAAMiC,EAAQ,WAKnB,SAAAA,EAAmBd,GACjB/C,KAAK8D,OAASf,EACd/C,KAAK+D,wBAA0B,CACjC,CAgBC,OAhBAF,EAAAjD,UAEMoD,aAAP,SAAoBC,GAClB,MAAMC,EAAmB,CAAC,EACpBC,EAAcC,OAAOC,QAAQrE,KAAK8D,QACxC,IAAK,MAAOQ,EAAOtC,KAAUmC,EACvBnC,EAAMuC,iBAAoC,IAAtBN,EAAWK,GACjCJ,EAAOI,GAAS,CAAEpC,aAAa,cAAeoC,EAAK,gCAAiCrC,SAAS,IAE7FiC,EAAOI,GAAStC,EAAMD,cAAckC,EAAWK,IAC3CtC,EAAMwC,UAAYP,EAAWK,KAAWL,EAAWjC,EAAMwC,YAC3DN,EAAOI,GAAS,CAAEpC,aAAiBF,EAAMwC,SAAQ,mBAAoBvC,SAAS,KAIpF,OAAOiC,CACT,EAACL,CAAA,CAxBkB,G,cCqCrB,SAASY,EAAgBlB,EAAoBmB,GAC3C,OAAQA,EAAO3E,MACb,IAAK,oBACH,MAAO,IACFwD,EACHU,WAAY,IAAKV,EAAMU,cAAeS,EAAOC,UAEjD,IAAK,qBACH,MAAO,IACFpB,EACHqB,kBAAmB,IACdrB,EAAMqB,qBACLF,EAAOC,UAGjB,IAAK,eACH,MAAO,IAAKpB,EAAOqB,kBAAmBF,EAAOC,SAC/C,QACE,OAAOpB,EAEb,CAEA,MAAMsB,EAAeC,IAQQ,IARW,SACtCC,EAAQ,aACRC,EAAY,oBACZC,EAAmB,KACnBlC,EAAI,eACJmC,EAAc,oBACdC,EAAmB,OACnBC,GACqBN,EACrB,MAAMO,GAAmBC,EAAAA,EAAAA,UACvB,IACElB,OAAOmB,KAAK,IAAKP,IAAgBQ,QAC/B,CAACC,EAAKC,KAAI,IACLD,EACH,CAACC,GAAkB,CAAEzD,SAAS,EAAOC,aAAc,OAErD,CAAC,IAEL,CAAC8C,IAGH,SAASW,EAAqBhD,EAAaiD,GACzC,YAD6D,IAApBA,IAAAA,EAAuB,IAC5DX,GAECA,EAAkDtC,IAGhDiD,CACT,CAEA,MAAMC,GAAmCP,EAAAA,EAAAA,UACvC,MACEV,kBAAmB,IAAKS,GACxBpB,WAAY,IAAMe,GAAgB,CAAC,MAErC,CAACA,EAAcK,KAGX,EAAC9B,EAAM,EAACuC,IAAYC,EAAAA,EAAAA,YACxBtB,EACAoB,OACA,GAGIG,GAAgBC,EAAAA,EAAAA,cACpB,CAACC,EAAYC,KACX,MAAMpF,EAAc4E,EAAqBO,GACrCnF,IACFoF,EAAEjE,aAAenB,GAEnB+E,EAAS,CAAE/F,KAAM,qBAAsB4E,QAAS,CAAE,CAACuB,GAAIC,IAAM,GAE/D,CAACR,IAGGS,GAAWH,EAAAA,EAAAA,cAAY,KAC3BH,EAAS,CAAE/F,KAAM,eAAgB4E,QAAS,IAAKU,KAC/C,MACMgB,EADY,IAAIxC,EAASd,EAAKH,KACdoB,aAAaT,EAAMU,YACnCqC,EAAkBlC,OAAOC,QAAQgC,GAAKE,QAAQ9D,IAClD,MAAO+D,EAAGxE,GAASS,EACnB,OAAOT,EAAMC,OAAO,IAEtB,GAAIqE,EAAgBjE,OAAS,EAC3B,IAAK,MAAOM,EAAKX,KAAUsE,EACzBN,EAAcrD,EAAgBX,QAGhCkD,GAAkBA,EAAe3B,EAAMU,WAAmB+B,EAC5D,GACC,CACDX,EACAtC,EAAKH,IACLW,EAAMU,WACN+B,EACAd,IAGIuB,GAAkBR,EAAAA,EAAAA,cACtB,CAACC,EAAYC,KACPhB,GAAuB5B,EAAMqB,kBAAkBsB,GAAajE,SAC9D+D,EAAcE,EAAG,CAAEjE,SAAS,EAAOC,aAAc,KAEnD4D,EAAS,CAAE/F,KAAM,oBAAqB4E,QAAS,CAAE,CAACuB,GAAIC,IAAM,GAE9D,CAAC5C,EAAOuC,IAGJY,GAAsBT,EAAAA,EAAAA,cACzBU,IACCb,EAAS,CAAE/F,KAAM,oBAAqB4E,QAAS,IAAKgC,IAAe,GAErE,CAACpD,EAAOuC,IAGJc,GAAmBtB,EAAAA,EAAAA,UAAQ,KAC/B,MAAMuB,EAAYzC,OAAO0C,OAAOvD,EAAMqB,mBAAmBmC,MACtDtE,GAAOA,EAAGR,UAEP+E,EAAU5C,OAAO0C,OAAOvD,EAAMU,YAAY8C,MAAMtE,GAChDH,MAAMC,QAAQE,GACTA,EAAGJ,QAAU,GAEdI,IAEV,OAAOoE,GAAaG,CAAO,GAC1B,CAACzD,EAAMqB,kBAAmBrB,EAAMU,aAMnC,OAJAgD,EAAAA,EAAAA,YAAU,KACR7B,EAAOqB,EAAgB,GACtB,CAACrB,IAGF8B,EAAAA,cAACA,EAAAA,SAAc,KACZnC,EACGA,EAAS,CACPqB,WACAe,WAAY5D,EAAMqB,kBAGlBkC,OAAQvD,EAAMU,WACdwC,kBACAC,sBACAU,WAAYR,IAEd,KACW,E,kCCnMd,MAAMS,EAAqB,CAChCC,UAAWC,EAAAA,OAAOC,IAAGC,WAAA,CAAAC,YAAA,iCAAAC,YAAA,eAAVJ,CAAU,uKAKJK,EAAAA,GAAgB,IAOjCC,cAAeN,EAAAA,OAAOC,IAAGC,WAAA,CAAAC,YAAA,qCAAAC,YAAA,eAAVJ,CAAU,qOAOdzC,IAAA,IAAC,WAAEgD,GAAYhD,EAAA,OAAMgD,EAAa,UAAY,MAAM,IAY/DC,mBAAoBR,EAAAA,OAAOC,IAAGC,WAAA,CAAAC,YAAA,0CAAAC,YAAA,eAAVJ,CAAU,MAC9BS,eAAgBT,EAAAA,OAAOC,IAAGC,WAAA,CAAAC,YAAA,sCAAAC,YAAA,eAAVJ,CAAU,qKAc1BU,cAAeV,EAAAA,OAAOC,IAAGC,WAAA,CAAAC,YAAA,qCAAAC,YAAA,eAAVJ,CAAU,kCACTW,IAAA,IAAC,WAAEC,GAAYD,EAAA,OAAKC,CAAU,K,cCdhD,MAAM,UAAEb,EAAS,cAAEO,EAAa,eAAEG,EAAc,cAAEC,GAChDZ,GAEI,cAAEe,EAAa,OAAEC,EAAM,aAAEC,GAAiBC,EAAAA,gBAC1C,iBAAEC,EAAgB,kBAAEC,EAAiB,gBAAEC,GAC3CC,EAAAA,sBACI,qBAAEC,EAAoB,oBAAEC,GAC5BC,EAAAA,8BACI,WAAEC,EAAU,WAAEC,EAAU,WAAEC,GAAeC,EAAAA,qBACzC,aAAEC,GAAiBC,EAAAA,aACnB,mBAAEC,GAAuBC,EAAAA,iBA8S/B,MA1SsCC,KAAM,IAAAzE,EAC1C,MAAM,EAAE0E,IAAMC,EAAAA,EAAAA,MACRC,EAAS,IAAIC,iBACE,oBAAXC,OACJA,OACA,CAAEC,SAAU,CAAEC,OAAQ,MACxBD,SAASC,QAEPC,EACc,oBAAXH,QAAyBA,OAAOI,WAAa,MAChD,EAACC,EAAM,EAAEC,IAAaC,EAAAA,EAAAA,WAAS,GAC/BC,EAG8B,QAHnBtF,EACS,oBAAjBuF,aACHA,aACA,CAAEC,QAAUd,cAAkB,IAAA1E,OAAA,EAHhBA,EAIjBwF,QAAQ,eACL,EAACC,EAAU,EAAEC,IAAiBL,EAAAA,EAAAA,YAAWC,GAEzCK,EACJC,IAEA,OAAQA,GACN,IAAK,QACL,IAAK,YACL,IAAK,QACL,IAAK,UACHd,OAAOC,SAASc,KAAO,IAG3B,EAoBIC,GACJ3E,EAAAA,EAAAA,cAAY4E,UACV,UACyBC,MAtDb,wDAsD8B,CACtCC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAM,UACNC,KAAMC,KAAKC,UAAUtE,KAEvB0D,GAAc,GACdH,aAAagB,QAAQ,aAAc,OACrC,CAAE,MAAOC,GACPC,QAAQC,IAAIF,EACd,IACC,IAML,OAJArE,EAAAA,EAAAA,YAAU,KACRwE,EAAAA,EAAQC,eAAeC,MAAM,GAC5B,IAGDzE,EAAAA,cAAC0E,EAAAA,EAAU,KACT1E,EAAAA,cAAC2E,EAAAA,EAAU,CACT3B,UAAWA,EACXD,OAAQA,EACRQ,iBAAkBA,IAEnBV,GACC7C,EAAAA,cAAC4E,EAAAA,EAAuB,CACtB5B,UAAWA,EACXO,iBAAkBA,EAClBR,OAAQA,IAGZ/C,EAAAA,cAAC6E,EAAAA,EAAS,MACV7E,EAAAA,cAACkB,EAAa,KACZlB,EAAAA,cAACI,EAAS,KACRJ,EAAAA,cAAC6B,EAAU,MACVwB,EACCrD,EAAAA,cAACW,EAAa,KACZX,EAAAA,cAAC+B,EAAU,MACX/B,EAAAA,cAACoB,EAAY,KACXpB,EAAAA,cAACuB,EAAiB,KACfe,EAAE,yBAGPtC,EAAAA,cAACoB,EAAY,KACXpB,EAAAA,cAACwB,EAAe,CAACsD,MAAM,SACpBxC,EAAE,0BACHtC,EAAAA,cAAC2B,EAAmB,CAAC8B,KAAK,oCAAmC,gCAOnEzD,EAAAA,cAACrC,EAAY,CACXM,qBAAmB,EACnBC,OA5EV6G,IAEA,MAAMC,EAAgBxC,EAAO9G,IAAI,aACjC,GAAIsJ,EAAe,CACjB,MAAM9I,EAAQ+I,mBAAmBC,OAAOC,KAAKH,KAC7C9I,GACEkJ,YAAW,KACTL,EAAK,QAAS7I,EAAM,GACnB,EACP,GAoEU8B,eAAgB0F,EAChB5F,aAAc,CACZ/B,UAAW,GACXC,WAAY,GACZC,SAAU,GACVC,MAAO,GACPC,YAAa,GACbC,QAAS,GACTC,MAAO,GACPC,KAAM,GACNC,OAAQ,GACRC,MAAO,GACPC,UAAW,GACXC,QAAS,IAEXb,KAAMF,IAELqF,IAAuD,IAAtD,SAAE9B,EAAQ,WAAEe,EAAU,gBAAEV,EAAe,OAAEK,GAAQoB,EACjD,OACEhB,EAAAA,cAACW,EAAa,KACZX,EAAAA,cAACe,EAAa,CAACE,WAAY,GACzBjB,EAAAA,cAACsB,EAAgB,CAACwD,MAAM,SAAQ,yBAIlC9E,EAAAA,cAACc,EAAc,KACbd,EAAAA,cAACiC,EAAY,CACXpJ,KAAK,OACLwM,UAAW,IACXvK,MAAO8E,EAAO1D,MACdoJ,SAAUC,IAAA,IAAC,OAAEC,GAAQD,EAAA,OACnBhG,EAAgB,QAASiG,EAAO1K,MAAM,EAExC2K,YAAY,QACZC,SAAUzF,EAAW/D,MAAMnB,WAG/BiF,EAAAA,cAACc,EAAc,KACbd,EAAAA,cAACiC,EAAY,CACXpJ,KAAK,OACLwM,UAAW,IACXvK,MAAO8E,EAAOzD,YACdmJ,SAAUK,IAAA,IAAC,OAAEH,GAAQG,EAAA,OACnBpG,EAAgB,cAAeiG,EAAO1K,MAAM,EAE9C2K,YAAY,eACZC,SAAUzF,EAAW9D,YAAYpB,WAGrCiF,EAAAA,cAACe,EAAa,CAACE,WAAY,IACzBjB,EAAAA,cAACsB,EAAgB,CAACwD,MAAM,SAAQ,cAIlC9E,EAAAA,cAACc,EAAc,KACbd,EAAAA,cAACiC,EAAY,CACXpJ,KAAK,OACLwM,UAAW,IACXvK,MAAO8E,EAAO7D,UACduJ,SAAUM,IAAA,IAAC,OAAEJ,GAAQI,EAAA,OACnBrG,EAAgB,YAAaiG,EAAO1K,MAAM,EAE5C2K,YAAY,aACZC,SAAUzF,EAAWlE,UAAUhB,WAGnCiF,EAAAA,cAACc,EAAc,KACbd,EAAAA,cAACiC,EAAY,CACXpJ,KAAK,OACLwM,UAAW,IACXvK,MAAO8E,EAAO5D,WACdsJ,SAAUO,IAAA,IAAC,OAAEL,GAAQK,EAAA,OACnBtG,EAAgB,aAAciG,EAAO1K,MAAM,EAE7C2K,YAAY,aACZC,SAAUzF,EAAWjE,WAAWjB,WAGpCiF,EAAAA,cAACc,EAAc,KACbd,EAAAA,cAACiC,EAAY,CACXpJ,KAAK,OACLwM,UAAW,IACXvK,MAAO8E,EAAO3D,SACdqJ,SAAUQ,IAAA,IAAC,OAAEN,GAAQM,EAAA,OACnBvG,EAAgB,WAAYiG,EAAO1K,MAAM,EAE3C2K,YAAY,YACZC,SAAUzF,EAAWhE,SAASlB,WAGlCiF,EAAAA,cAACe,EAAa,CAACE,WAAY,IACzBjB,EAAAA,cAACsB,EAAgB,CAACwD,MAAM,SAAQ,qBAIlC9E,EAAAA,cAACc,EAAc,KACbd,EAAAA,cAACiC,EAAY,CACXpJ,KAAK,OACLwM,UAAW,IACXvK,MAAO8E,EAAOxD,QACdkJ,SAAUS,IAAA,IAAC,OAAEP,GAAQO,EAAA,OACnBxG,EAAgB,UAAWiG,EAAO1K,MAAM,EAE1C2K,YAAY,UACZC,SAAUzF,EAAW7D,QAAQrB,WAGjCiF,EAAAA,cAACc,EAAc,KACbd,EAAAA,cAACiC,EAAY,CACXpJ,KAAK,OACLwM,UAAW,IACXvK,MAAO8E,EAAOvD,MACdiJ,SAAUU,IAAA,IAAC,OAAER,GAAQQ,EAAA,OACnBzG,EAAgB,QAASiG,EAAO1K,MAAM,EAExC2K,YAAY,eACZC,SAAUzF,EAAW5D,MAAMtB,UAE7BiF,EAAAA,cAACiC,EAAY,CACXpJ,KAAK,OACLwM,UAAW,IACXvK,MAAO8E,EAAOtD,KACdgJ,SAAUW,IAAA,IAAC,OAAET,GAAQS,EAAA,OACnB1G,EAAgB,OAAQiG,EAAO1K,MAAM,EAEvC2K,YAAY,OACZC,SAAUzF,EAAW3D,KAAKvB,WAG9BiF,EAAAA,cAACc,EAAc,KACbd,EAAAA,cAACiC,EAAY,CACXpJ,KAAK,OACLwM,UAAW,IACXvK,MAAO8E,EAAOrD,OACd+I,SAAUY,IAAA,IAAC,OAAEV,GAAQU,EAAA,OACnB3G,EAAgB,SAAUiG,EAAO1K,MAAM,EAEzC2K,YAAY,SACZC,SAAUzF,EAAW1D,OAAOxB,UAE9BiF,EAAAA,cAACiC,EAAY,CACXpJ,KAAK,OACLwM,UAAW,IACXvK,MAAO8E,EAAOpD,MACd8I,SAAUa,IAAA,IAAC,OAAEX,GAAQW,EAAA,OACnB5G,EAAgB,QAASiG,EAAO1K,MAAM,EAExC2K,YAAY,QACZC,SAAUzF,EAAWzD,MAAMzB,UAE7BiF,EAAAA,cAACiC,EAAY,CACXpJ,KAAK,OACLwM,UAAW,IACXvK,MAAO8E,EAAOnD,UACd6I,SAAUc,IAAA,IAAC,OAAEZ,GAAQY,EAAA,OACnB7G,EAAgB,YAAaiG,EAAO1K,MAAM,EAE5C2K,YAAY,YACZC,SAAUzF,EAAWxD,UAAU1B,UAEjCiF,EAAAA,cAACiC,EAAY,CACXpJ,KAAK,OACLwM,UAAW,IACXvK,MAAO8E,EAAOlD,QACd4I,SAAUe,IAAA,IAAC,OAAEb,GAAQa,EAAA,OACnB9G,EAAgB,UAAWiG,EAAO1K,MAAM,EAE1C2K,YAAY,WACZC,SAAUzF,EAAWvD,QAAQ3B,WAGjCiF,EAAAA,cAACmC,EAAkB,CAACmE,QAASpH,GAC3Bc,EAAAA,cAAC0B,EAAoB,KAAEY,EAAE,YAEb,IAKxBtC,EAAAA,cAAC8B,EAAU,OAEb9B,EAAAA,cAACmB,EAAM,CAACoF,OAAQ,MAChBvG,EAAAA,cAACwG,EAAAA,EAAU,OAEF,EAMV,MAAMC,EAAeA,IAC1BzG,EAAAA,cAAC0G,EAAAA,EAAI,CACHC,KAAK,4LACLC,MAAM,yD","sources":["webpack://cyberpunk-attack/./src/services/validators/Formadjo.ts","webpack://cyberpunk-attack/./src/services/forms/shipment.form.ts","webpack://cyberpunk-attack/./src/services/validators/FormadjoFormer.ts","webpack://cyberpunk-attack/./src/services/validators/MainFormadjo.ts","webpack://cyberpunk-attack/./src/services/validators/FormadjoForm.tsx","webpack://cyberpunk-attack/./src/styles/pageStyles/shipment-form.styles.ts","webpack://cyberpunk-attack/./src/pages/shipment-form.tsx"],"sourcesContent":["type formadjoTypes = 'string' | 'number' | 'boolean' | 'null' | 'object' | 'unknown';\nexport class FormadjoField {\n  private readonly __NAME__: string;\n\n  private __isRequired: boolean;\n\n  private __dependOn: string;\n\n  private __minLength: number;\n\n  private __maxLength: number;\n\n  private __regexpValidation: object | void; // /[0-9]{1..3}/ has type object;\n\n  private __type: formadjoTypes;\n\n  private __customErrors: { [key: string]: string };\n\n  private __body: { [key: string]: FormadjoField } | null;\n\n  private __arrayValueType: 'string' | 'number' | 'boolean' | 'null' | 'unknown';\n\n  constructor(name: string, type: formadjoTypes) {\n    this.__NAME__ = name;\n    this.__isRequired = false;\n    this.__type = type;\n    this.__maxLength = -1;\n    this.__minLength = -1;\n    this.__regexpValidation = void 0;\n    this.__customErrors = {};\n    this.__body = null;\n    this.__dependOn = '';\n    this.__arrayValueType = 'unknown';\n  }\n\n  public get isRequired(): boolean {\n    return this.__isRequired;\n  }\n\n  public get dependOn(): string {\n    return this.__dependOn;\n  }\n\n  public setDependingField(val: string, customError: string | null = null) {\n    this.__dependOn = val;\n    if (typeof customError === 'string') {\n      this.__customErrors.__dependOn_error = customError;\n    }\n    return this;\n  }\n\n  public setArrayValueType(val: 'string' | 'number' | 'boolean' | 'null', customError: string | null = null) {\n    this.__arrayValueType = val;\n    if (typeof customError === 'string') {\n      this.__customErrors.__dependOn_error = customError;\n    }\n    return this;\n  }\n\n  public setBody(val: { [key: string]: FormadjoField }) {\n    if (this.__type === 'object') {\n      this.__body = val;\n    } else {\n      throw Error('Only object type can have body');\n    }\n  }\n\n  public setIsRequired(val: boolean, customError: string | null = null) {\n    this.__isRequired = val;\n    if (typeof customError === 'string') {\n      this.__customErrors.__isRequired_error = customError;\n    }\n    return this;\n  }\n\n  public setType(val: formadjoTypes, customError: string | null = null) {\n    this.__type = val;\n    if (typeof customError === 'string') {\n      this.__customErrors.__type_error = customError;\n    }\n    return this;\n  }\n\n  public setMaxLength(val: number, customError: string | null = null) {\n    this.__maxLength = val;\n    if (typeof customError === 'string') {\n      this.__customErrors.__maxLength_error = customError;\n    }\n    return this;\n  }\n\n  public setMinLength(val: number, customError: string | null = null) {\n    this.__minLength = val;\n    if (typeof customError === 'string') {\n      this.__customErrors.__minLength_error = customError;\n    }\n    return this;\n  }\n\n  public setRegexpValidation(val: object, customError: string | null = null) {\n    this.__regexpValidation = val;\n    if (typeof customError === 'string') {\n      this.__customErrors.__regexpValidation_error = customError;\n    }\n    return this;\n  }\n\n  public getRegexp() {\n    return this.__regexpValidation;\n  }\n\n  public validateField<T>(value: T): { isError: boolean, errorMessage: string } {\n    if (typeof value !== `${this.__type}`) {\n      return { isError: true, errorMessage: `Type mismatch, expects: ${this.__type} but got: ${typeof value}` };\n    }\n    switch (typeof value) {\n      case 'string':\n        if (this.__regexpValidation !== void 0 && (<RegExp> this.__regexpValidation).test) {\n          const isValid = (<RegExp> this.getRegexp()).test(value.trim());\n          if (!isValid) {\n            return { isError: true, errorMessage: `Invalid ${this.__NAME__}` };\n          }\n        }\n        if (this.__maxLength !== -1 && value.length > this.__maxLength) {\n          return { isError: true, errorMessage: `Length of ${this.__NAME__} should be less than ${this.__maxLength}` };\n        }\n        if (this.__minLength !== -1 && value.length < this.__minLength) {\n          return { isError: true, errorMessage: `Length of ${this.__NAME__} should be bigger than ${this.__minLength}` };\n        }\n        break;\n      case 'number':\n        if (this.__maxLength !== -1 && value > this.__maxLength) {\n          return { isError: true, errorMessage: `Value of ${this.__NAME__} should be less than ${this.__maxLength}` };\n        }\n        if (this.__minLength !== -1 && value < this.__minLength) {\n          return { isError: true, errorMessage: `Value of ${this.__NAME__} should be bigger than ${this.__minLength}` };\n        }\n        break;\n      case 'object':\n        if (Array.isArray(value)) {\n          if (this.__arrayValueType !== 'unknown' && value.every((el) => typeof el !== this.__arrayValueType)) {\n            return { isError: true, errorMessage: `Type mismatch, expects: ${this.__type} but got: ${typeof value}` };\n          }\n          if (this.__maxLength !== -1 && value.length > this.__maxLength) {\n            return { isError: true, errorMessage: `Length of ${this.__NAME__} should be less than ${this.__maxLength}` };\n          }\n          if (this.__minLength !== -1 && value.length < this.__minLength) {\n            return { isError: true, errorMessage: `Length of ${this.__NAME__} should be bigger than ${this.__minLength}` };\n          }\n        }\n        if (this.__body !== null) {\n          return this.validateField(this.__body);\n        }\n        break;\n      default:\n        break;\n    }\n    return { isError: false, errorMessage: '' };\n  }\n}\n","import { FormadjoField } from \"../validators/Formadjo\";\nimport { FormadjoFormer } from \"../validators/FormadjoFormer\";\n\nexport interface IShipmentFormTemplate {\n  firstName: string;\n  patronymic: string;\n  lastName: string;\n  email: string;\n  phoneNumber: string;\n  country: string;\n  state: string;\n  city: string;\n  street: string;\n  house: string;\n  apartment: string;\n  zipcode: string;\n}\n\nexport const shipmentForm = new FormadjoFormer<IShipmentFormTemplate>({\n  firstName: new FormadjoField(\"firstName\", \"string\")\n    .setIsRequired(true)\n    .setMinLength(2)\n    .setMaxLength(50),\n  patronymic: new FormadjoField(\"patronymic\", \"string\")\n    .setIsRequired(false)\n    .setMaxLength(50),\n  lastName: new FormadjoField(\"lastName\", \"string\")\n    .setIsRequired(true)\n    .setMinLength(2)\n    .setMaxLength(50),\n  email: new FormadjoField(\"email\", \"string\")\n    .setIsRequired(true)\n    .setRegexpValidation(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/),\n  phoneNumber: new FormadjoField(\"phoneNumber\", \"string\")\n    .setIsRequired(true)\n    .setRegexpValidation(/^\\+?[0-9]{7,15}$/),\n  country: new FormadjoField(\"country\", \"string\")\n    .setIsRequired(true)\n    .setMaxLength(50),\n  state: new FormadjoField(\"state\", \"string\")\n    .setIsRequired(true)\n    .setMaxLength(50),\n  city: new FormadjoField(\"city\", \"string\")\n    .setIsRequired(true)\n    .setMaxLength(50),\n  street: new FormadjoField(\"street\", \"string\")\n    .setIsRequired(true)\n    .setMaxLength(100),\n  house: new FormadjoField(\"house\", \"string\")\n    .setIsRequired(true)\n    .setMaxLength(10),\n  apartment: new FormadjoField(\"apartment\", \"string\")\n    .setIsRequired(false)\n    .setMaxLength(10),\n  zipcode: new FormadjoField(\"zipcode\", \"string\")\n    .setIsRequired(true)\n    .setRegexpValidation(/^[0-9]{5,10}$/),\n});\n","import { FormadjoField } from '@core/validators/Formadjo';\n\nexport type GenericFormadjoValidator<T> = { [key in keyof T]: FormadjoField }\n\nexport class FormadjoFormer<T extends object> {\n  private readonly __form__: GenericFormadjoValidator<T>;\n\n  constructor(form: GenericFormadjoValidator<T>) {\n    this.__form__ = form;\n  }\n\n  public get get(): GenericFormadjoValidator<T> {\n    return this.__form__;\n  }\n}\n","import { FormadjoField } from './Formadjo';\n\nexport type FormadjoValidator = { [key: string]: FormadjoField }\n\nexport type formValuesType = string | number | boolean | object | null;\n\nexport type errorPart = {\n  isError: boolean;\n  errorMessage: string;\n};\n\nexport type errorRes = { [key: string]: errorPart };\n\nexport class Formadjo {\n  private readonly __FORM: FormadjoValidator;\n\n  private _form_error_last_number: number;\n\n  public constructor(form: FormadjoValidator) {\n    this.__FORM = form;\n    this._form_error_last_number = 0;\n  }\n\n  public validateForm(formValues: {[key: string]: formValuesType}): errorRes {\n    const result: errorRes = {};\n    const formAsArray = Object.entries(this.__FORM);\n    for (const [label, value] of formAsArray) {\n      if (value.isRequired && formValues[label] === void 0) {\n        result[label] = { errorMessage: `Form field ${label} is not appear in form values`, isError: true };\n      } else {\n        result[label] = value.validateField(formValues[label]);\n        if (value.dependOn && formValues[label] !== formValues[value.dependOn]) {\n          result[label] = { errorMessage: `${value.dependOn}s are not equal!`, isError: true };\n        }\n      }\n    }\n    return result;\n  }\n}\n","import { Formadjo, errorPart, formValuesType } from \"./MainFormadjo\";\nimport { FormadjoFormer } from \"@core/validators/FormadjoFormer\";\nimport React, { useCallback, useEffect, useMemo, useReducer } from \"react\";\n\nexport type FormadjoSubmitFn<T extends object> = (\n  values: T,\n  addExtendedError: (k: keyof T, v: errorPart) => void\n) => void;\nexport type FormadjoAsyncSubmitFn<T extends object> = (\n  values: T,\n  addExtendedError: (k: keyof T, v: errorPart) => void\n) => Promise<void>;\n\ntype formadjoFormFuncValue<T> = {\n  onSubmit(): void;\n  errorsList: { [key in keyof T]: errorPart };\n  values: { [key in keyof T]: T[key] };\n  updateFormState(k: keyof T, v: formValuesType): void;\n  updateManyFormState(properties: { [key in keyof T]: formValuesType }): void;\n  isDisabled: boolean;\n};\n\ntype formadjoFormProps<T extends object> = {\n  form: FormadjoFormer<T>;\n  onFinishSubmit: FormadjoSubmitFn<T> | FormadjoAsyncSubmitFn<T>;\n  children?: (data: formadjoFormFuncValue<T>) => JSX.Element;\n  initialProps: { [key in keyof T]: formValuesType };\n  customErrorMessages?: Partial<{ [key in keyof T]: string }>;\n  reduxStore?: {\n    storeKey: string;\n  };\n  removeErrorOnChange?: boolean;\n  onLoad?: (updateFunc: (k: keyof T, v: formValuesType) => void) => void;\n};\n\ntype formadjoAction = {\n  type: string;\n  payload: any;\n};\n\ntype reducerBody = {\n  errorNumberFields: { [key in keyof reducerBody[\"formValues\"]]: errorPart };\n  formValues: { [key: string]: formValuesType };\n};\n\ntype Action =\n  | { type: \"CLEAR_ERRORS\"; payload: { [key: string]: errorPart } }\n  | { type: \"UPDATE_FORM_VALUE\"; payload: { [key: string]: formValuesType } }\n  | { type: \"UPDATE_ERROR_VALUE\"; payload: { [key: string]: formValuesType } };\n\nfunction formadjoReducer(state: reducerBody, action: Action) {\n  switch (action.type) {\n    case \"UPDATE_FORM_VALUE\":\n      return {\n        ...state,\n        formValues: { ...state.formValues, ...action.payload },\n      };\n    case \"UPDATE_ERROR_VALUE\":\n      return {\n        ...state,\n        errorNumberFields: {\n          ...state.errorNumberFields,\n          ...(action.payload as { [k: string]: errorPart }),\n        },\n      };\n    case \"CLEAR_ERRORS\":\n      return { ...state, errorNumberFields: action.payload };\n    default:\n      return state;\n  }\n}\n\nconst FormadjoForm = <T extends object>({\n  children,\n  initialProps,\n  customErrorMessages,\n  form,\n  onFinishSubmit,\n  removeErrorOnChange,\n  onLoad,\n}: formadjoFormProps<T>) => {\n  const initialErrorList = useMemo(\n    () =>\n      Object.keys({ ...initialProps }).reduce(\n        (acc, curr) => ({\n          ...acc,\n          [curr as keyof T]: { isError: false, errorMessage: \"\" },\n        }),\n        {}\n      ),\n    [initialProps]\n  );\n\n  function getCustomErrorByName(key: string, defaultValue: string = \"\") {\n    if (customErrorMessages) {\n      return (\n        (customErrorMessages as { [key: string]: string })[key] || defaultValue\n      );\n    }\n    return defaultValue;\n  }\n\n  const initialReducerProps: reducerBody = useMemo(\n    () => ({\n      errorNumberFields: { ...initialErrorList },\n      formValues: { ...(initialProps || {}) },\n    }),\n    [initialProps, initialErrorList]\n  );\n\n  const [state, dispatch] = useReducer(\n    formadjoReducer,\n    initialReducerProps,\n    void 0\n  );\n\n  const setErrorField = useCallback(\n    (k: keyof T, v: errorPart) => {\n      const customError = getCustomErrorByName(k as string);\n      if (customError) {\n        v.errorMessage = customError;\n      }\n      dispatch({ type: \"UPDATE_ERROR_VALUE\", payload: { [k]: v } });\n    },\n    [getCustomErrorByName]\n  );\n\n  const onSubmit = useCallback(() => {\n    dispatch({ type: \"CLEAR_ERRORS\", payload: { ...initialErrorList } });\n    const errorList = new Formadjo(form.get);\n    const res = errorList.validateForm(state.formValues);\n    const filteredEntries = Object.entries(res).filter((el) => {\n      const [_, value] = el;\n      return value.isError;\n    });\n    if (filteredEntries.length > 0) {\n      for (const [key, value] of filteredEntries) {\n        setErrorField(key as keyof T, value);\n      }\n    } else {\n      onFinishSubmit && onFinishSubmit(state.formValues as any, setErrorField);\n    }\n  }, [\n    initialErrorList,\n    form.get,\n    state.formValues,\n    setErrorField,\n    onFinishSubmit,\n  ]);\n\n  const updateFormState = useCallback(\n    (k: keyof T, v: formValuesType) => {\n      if (removeErrorOnChange && state.errorNumberFields[k as string].isError) {\n        setErrorField(k, { isError: false, errorMessage: \"\" });\n      }\n      dispatch({ type: \"UPDATE_FORM_VALUE\", payload: { [k]: v } });\n    },\n    [state, dispatch]\n  );\n\n  const updateManyFormState = useCallback(\n    (properties: { [key in keyof T]: formValuesType }) => {\n      dispatch({ type: \"UPDATE_FORM_VALUE\", payload: { ...properties } });\n    },\n    [state, dispatch]\n  );\n\n  const handleIsDisabled = useMemo(() => {\n    const hasErrors = Object.values(state.errorNumberFields).some(\n      (el) => el.isError\n    );\n    const isEmpty = Object.values(state.formValues).some((el) => {\n      if (Array.isArray(el)) {\n        return el.length <= 0;\n      }\n      return !el;\n    });\n    return hasErrors || isEmpty;\n  }, [state.errorNumberFields, state.formValues]);\n\n  useEffect(() => {\n    onLoad(updateFormState);\n  }, [onLoad]);\n\n  return (\n    <React.Fragment>\n      {children\n        ? children({\n            onSubmit,\n            errorsList: state.errorNumberFields as {\n              [key in keyof T]: errorPart;\n            },\n            values: state.formValues as { [key in keyof T]: T[key] },\n            updateFormState,\n            updateManyFormState,\n            isDisabled: handleIsDisabled,\n          })\n        : null}\n    </React.Fragment>\n  );\n};\n\nexport { FormadjoForm };\n","import { HEADER_HEIGHT } from \"../../constant/constants\";\nimport { styled } from \"styled-components\";\n\nexport const shipmentFormStyles = {\n  Container: styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    flex: 1;\n    padding-top: ${HEADER_HEIGHT + 30}px;\n    padding-left: 32px;\n    padding-right: 32px;\n    margin-bottom: 80px;\n    flex: 1;\n    height: 100%;\n  `,\n  FormContainer: styled.div<{ $isStretch?: boolean }>`\n    padding-top: 24px;\n    display: flex;\n    flex-direction: column;\n\n    align-items: center;\n    gap: 8px;\n    width: ${({ $isStretch }) => ($isStretch ? \"initial\" : \"100%\")};\n    max-width: 650px;\n\n    @media only screen and (max-width: 1024px) {\n      flex-direction: column;\n      margin-left: auto;\n      margin-right: auto;\n      & > * {\n        width: 100%;\n      }\n    }\n  `,\n  InputListContainer: styled.div``,\n  InputContainer: styled.div`\n    width: 100%;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    gap: 8px;\n    max-width: 650px;\n    flex-wrap: wrap;\n    flex: 1;\n    & > input {\n      display: flex;\n      min-width: 120px;\n    }\n  `,\n  TextContainer: styled.div<{ paddingTop: number }>`\n    margin-top: ${({ paddingTop }) => paddingTop}px;\n    width: 100%;\n  `,\n};\n","import { ButtonComponents } from \"../components/buttons/Button/components\";\nimport { Html } from \"../components/html\";\nimport { ImageViewComponents } from \"../components/images/ImageView/styles\";\nimport { InputStyles } from \"../components/inputs/styles\";\nimport FooterView from \"../components/layout/Footer\";\nimport { FullScreenMenuComponent } from \"../components/layout/FullScreenMenu/FullScreenMenu\";\nimport HeaderView from \"../components/layout/Header\";\nimport MainLayout from \"../components/layout/MainLayout\";\nimport Preloader from \"../components/layout/Preloader/Preloader\";\nimport {\n  OverrideTypographyComponents,\n  TypographyComponents,\n} from \"../components/typography/typography.styles\";\nimport {\n  contactUs,\n  discordLink,\n  instagramLink,\n  kickstarter,\n} from \"../constant/constants\";\nimport { svgs } from \"../constant/svgs\";\nimport { service } from \"../services\";\nimport {\n  IShipmentFormTemplate,\n  shipmentForm,\n} from \"../services/forms/shipment.form\";\nimport {\n  FormadjoAsyncSubmitFn,\n  FormadjoForm,\n} from \"../services/validators/FormadjoForm\";\nimport { formValuesType } from \"../services/validators/MainFormadjo\";\nimport { HomePageStyles } from \"../styles/pageStyles/home.styles\";\nimport { shipmentFormStyles } from \"../styles/pageStyles/shipment-form.styles\";\nimport type { HeadFC, PageProps } from \"gatsby\";\nimport * as React from \"react\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nconst { Container, FormContainer, InputContainer, TextContainer } =\n  shipmentFormStyles;\n\nconst { PageContainer, Spacer, InnerWrapper } = HomePageStyles;\nconst { Text26Bangers400, Text48Orbitron700, Text24Zekton400 } =\n  TypographyComponents;\nconst { Text16Zekton400Black, Text24Zekton400Link } =\n  OverrideTypographyComponents;\nconst { FormImage1, FormImage2, CheckImage } = ImageViewComponents;\nconst { PrimaryInput } = InputStyles;\nconst { ShipmentFormButton } = ButtonComponents;\n\nconst workerUrl = \"https://small-tooth-64b0.attackcyberpunk.workers.dev/\";\n\nconst HomePage: React.FC<PageProps> = () => {\n  const { t } = useTranslation();\n  const params = new URLSearchParams(\n    (typeof window !== \"undefined\"\n      ? window\n      : { location: { search: \"\" } }\n    ).location.search\n  );\n  const isMobile =\n    typeof window !== \"undefined\" ? window.innerWidth < 1024 : false;\n  const [isOpen, setIsOpen] = useState(false);\n  const isCompleted = (\n    typeof localStorage !== \"undefined\"\n      ? localStorage\n      : { getItem: (t: string) => {} }\n  )?.getItem(\"isAnswered\");\n  const [isAnswered, setIsAnswered] = useState(!!isCompleted);\n\n  const onScrollIntoView = (\n    arg: \"subscribe\" | \"about\" | \"trailer\" | \"start\"\n  ) => {\n    switch (arg) {\n      case \"start\":\n      case \"subscribe\":\n      case \"about\":\n      case \"trailer\":\n        window.location.href = \"/\";\n        break;\n      default:\n    }\n  };\n\n  const handleLoadEmailFromParam = (\n    func: (k: keyof IShipmentFormTemplate, v: formValuesType) => void\n  ) => {\n    const redirectValue = params.get(\"invite_id\");\n    if (redirectValue) {\n      const email = decodeURIComponent(escape(atob(redirectValue)));\n      email &&\n        setTimeout(() => {\n          func(\"email\", email);\n        }, 0);\n    }\n  };\n\n  const goTo = (url: string) => {\n    window.open(url, \"_blank\");\n  };\n\n  const onFormSubmit: FormadjoAsyncSubmitFn<IShipmentFormTemplate> =\n    useCallback(async (values) => {\n      try {\n        const response = await fetch(workerUrl, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          mode: \"no-cors\",\n          body: JSON.stringify(values),\n        });\n        setIsAnswered(true);\n        localStorage.setItem(\"isAnswered\", \"true\");\n      } catch (e) {\n        console.log(e);\n      }\n    }, []);\n\n  useEffect(() => {\n    service.initServices().then();\n  }, []);\n\n  return (\n    <MainLayout>\n      <HeaderView\n        setIsOpen={setIsOpen}\n        isOpen={isOpen}\n        onScrollIntoView={onScrollIntoView}\n      />\n      {isMobile && (\n        <FullScreenMenuComponent\n          setIsOpen={setIsOpen}\n          onScrollIntoView={onScrollIntoView}\n          isOpen={isOpen}\n        />\n      )}\n      <Preloader />\n      <PageContainer>\n        <Container>\n          <FormImage1 />\n          {isAnswered ? (\n            <FormContainer>\n              <CheckImage />\n              <InnerWrapper>\n                <Text48Orbitron700>\n                  {t(\"shipmentForm.header\")}\n                </Text48Orbitron700>\n              </InnerWrapper>\n              <InnerWrapper>\n                <Text24Zekton400 color=\"white\">\n                  {t(\"shipmentForm.subheader\")}\n                  <Text24Zekton400Link href=\"mailto:attackcyberpunk@gmail.com\">\n                    attackcyberpunk@gmail.com\n                  </Text24Zekton400Link>\n                </Text24Zekton400>\n              </InnerWrapper>\n            </FormContainer>\n          ) : (\n            <FormadjoForm<IShipmentFormTemplate>\n              removeErrorOnChange\n              onLoad={handleLoadEmailFromParam}\n              onFinishSubmit={onFormSubmit}\n              initialProps={{\n                firstName: \"\",\n                patronymic: \"\",\n                lastName: \"\",\n                email: \"\",\n                phoneNumber: \"\",\n                country: \"\",\n                state: \"\",\n                city: \"\",\n                street: \"\",\n                house: \"\",\n                apartment: \"\",\n                zipcode: \"\",\n              }}\n              form={shipmentForm}\n            >\n              {({ onSubmit, errorsList, updateFormState, values }) => {\n                return (\n                  <FormContainer>\n                    <TextContainer paddingTop={0}>\n                      <Text26Bangers400 color=\"white\">\n                        Email & Phone Number\n                      </Text26Bangers400>\n                    </TextContainer>\n                    <InputContainer>\n                      <PrimaryInput\n                        type=\"text\"\n                        maxLength={150}\n                        value={values.email}\n                        onChange={({ target }) =>\n                          updateFormState(\"email\", target.value)\n                        }\n                        placeholder=\"Email\"\n                        $isError={errorsList.email.isError}\n                      />\n                    </InputContainer>\n                    <InputContainer>\n                      <PrimaryInput\n                        type=\"text\"\n                        maxLength={150}\n                        value={values.phoneNumber}\n                        onChange={({ target }) =>\n                          updateFormState(\"phoneNumber\", target.value)\n                        }\n                        placeholder=\"Phone number\"\n                        $isError={errorsList.phoneNumber.isError}\n                      />\n                    </InputContainer>\n                    <TextContainer paddingTop={32}>\n                      <Text26Bangers400 color=\"white\">\n                        Full Name\n                      </Text26Bangers400>\n                    </TextContainer>\n                    <InputContainer>\n                      <PrimaryInput\n                        type=\"text\"\n                        maxLength={150}\n                        value={values.firstName}\n                        onChange={({ target }) =>\n                          updateFormState(\"firstName\", target.value)\n                        }\n                        placeholder=\"First Name\"\n                        $isError={errorsList.firstName.isError}\n                      />\n                    </InputContainer>\n                    <InputContainer>\n                      <PrimaryInput\n                        type=\"text\"\n                        maxLength={150}\n                        value={values.patronymic}\n                        onChange={({ target }) =>\n                          updateFormState(\"patronymic\", target.value)\n                        }\n                        placeholder=\"Patronymic\"\n                        $isError={errorsList.patronymic.isError}\n                      />\n                    </InputContainer>\n                    <InputContainer>\n                      <PrimaryInput\n                        type=\"text\"\n                        maxLength={150}\n                        value={values.lastName}\n                        onChange={({ target }) =>\n                          updateFormState(\"lastName\", target.value)\n                        }\n                        placeholder=\"Last Name\"\n                        $isError={errorsList.lastName.isError}\n                      />\n                    </InputContainer>\n                    <TextContainer paddingTop={32}>\n                      <Text26Bangers400 color=\"white\">\n                        Shipping Address\n                      </Text26Bangers400>\n                    </TextContainer>\n                    <InputContainer>\n                      <PrimaryInput\n                        type=\"text\"\n                        maxLength={150}\n                        value={values.country}\n                        onChange={({ target }) =>\n                          updateFormState(\"country\", target.value)\n                        }\n                        placeholder=\"Country\"\n                        $isError={errorsList.country.isError}\n                      />\n                    </InputContainer>\n                    <InputContainer>\n                      <PrimaryInput\n                        type=\"text\"\n                        maxLength={150}\n                        value={values.state}\n                        onChange={({ target }) =>\n                          updateFormState(\"state\", target.value)\n                        }\n                        placeholder=\"State/Region\"\n                        $isError={errorsList.state.isError}\n                      />\n                      <PrimaryInput\n                        type=\"text\"\n                        maxLength={150}\n                        value={values.city}\n                        onChange={({ target }) =>\n                          updateFormState(\"city\", target.value)\n                        }\n                        placeholder=\"City\"\n                        $isError={errorsList.city.isError}\n                      />\n                    </InputContainer>\n                    <InputContainer>\n                      <PrimaryInput\n                        type=\"text\"\n                        maxLength={150}\n                        value={values.street}\n                        onChange={({ target }) =>\n                          updateFormState(\"street\", target.value)\n                        }\n                        placeholder=\"Street\"\n                        $isError={errorsList.street.isError}\n                      />\n                      <PrimaryInput\n                        type=\"text\"\n                        maxLength={150}\n                        value={values.house}\n                        onChange={({ target }) =>\n                          updateFormState(\"house\", target.value)\n                        }\n                        placeholder=\"House\"\n                        $isError={errorsList.house.isError}\n                      />\n                      <PrimaryInput\n                        type=\"text\"\n                        maxLength={150}\n                        value={values.apartment}\n                        onChange={({ target }) =>\n                          updateFormState(\"apartment\", target.value)\n                        }\n                        placeholder=\"Apartment\"\n                        $isError={errorsList.apartment.isError}\n                      />\n                      <PrimaryInput\n                        type=\"text\"\n                        maxLength={150}\n                        value={values.zipcode}\n                        onChange={({ target }) =>\n                          updateFormState(\"zipcode\", target.value)\n                        }\n                        placeholder=\"Zip Code\"\n                        $isError={errorsList.zipcode.isError}\n                      />\n                    </InputContainer>\n                    <ShipmentFormButton onPress={onSubmit}>\n                      <Text16Zekton400Black>{t(\"submit\")}</Text16Zekton400Black>\n                    </ShipmentFormButton>\n                  </FormContainer>\n                );\n              }}\n            </FormadjoForm>\n          )}\n          <FormImage2 />\n        </Container>\n        <Spacer height={100} />\n        <FooterView />\n      </PageContainer>\n    </MainLayout>\n  );\n};\n\nexport default HomePage;\n\nexport const Head: HeadFC = () => (\n  <Html\n    meta=\"This board game is a cooperative team techno fight game where 2 - 8 players can clash in a battle. Join the battle as a resistance hacker or take control of the corporation as its boss.\"\n    title=\"Cyberpunk Attack - cooperative team techno fight game\"\n  />\n);\n"],"names":["FormadjoField","name","type","this","__NAME__","__isRequired","__type","__maxLength","__minLength","__regexpValidation","__customErrors","__body","__dependOn","__arrayValueType","_proto","prototype","setDependingField","val","customError","__dependOn_error","setArrayValueType","setBody","Error","setIsRequired","__isRequired_error","setType","__type_error","setMaxLength","__maxLength_error","setMinLength","__minLength_error","setRegexpValidation","__regexpValidation_error","getRegexp","validateField","value","isError","errorMessage","test","trim","length","Array","isArray","every","el","_createClass","key","get","shipmentForm","FormadjoFormer","form","__form__","firstName","patronymic","lastName","email","phoneNumber","country","state","city","street","house","apartment","zipcode","Formadjo","__FORM","_form_error_last_number","validateForm","formValues","result","formAsArray","Object","entries","label","isRequired","dependOn","formadjoReducer","action","payload","errorNumberFields","FormadjoForm","_ref","children","initialProps","customErrorMessages","onFinishSubmit","removeErrorOnChange","onLoad","initialErrorList","useMemo","keys","reduce","acc","curr","getCustomErrorByName","defaultValue","initialReducerProps","dispatch","useReducer","setErrorField","useCallback","k","v","onSubmit","res","filteredEntries","filter","_","updateFormState","updateManyFormState","properties","handleIsDisabled","hasErrors","values","some","isEmpty","useEffect","React","errorsList","isDisabled","shipmentFormStyles","Container","styled","div","withConfig","displayName","componentId","HEADER_HEIGHT","FormContainer","$isStretch","InputListContainer","InputContainer","TextContainer","_ref2","paddingTop","PageContainer","Spacer","InnerWrapper","HomePageStyles","Text26Bangers400","Text48Orbitron700","Text24Zekton400","TypographyComponents","Text16Zekton400Black","Text24Zekton400Link","OverrideTypographyComponents","FormImage1","FormImage2","CheckImage","ImageViewComponents","PrimaryInput","InputStyles","ShipmentFormButton","ButtonComponents","HomePage","t","useTranslation","params","URLSearchParams","window","location","search","isMobile","innerWidth","isOpen","setIsOpen","useState","isCompleted","localStorage","getItem","isAnswered","setIsAnswered","onScrollIntoView","arg","href","onFormSubmit","async","fetch","method","headers","mode","body","JSON","stringify","setItem","e","console","log","service","initServices","then","MainLayout","HeaderView","FullScreenMenuComponent","Preloader","color","func","redirectValue","decodeURIComponent","escape","atob","setTimeout","maxLength","onChange","_ref3","target","placeholder","$isError","_ref4","_ref5","_ref6","_ref7","_ref8","_ref9","_ref10","_ref11","_ref12","_ref13","_ref14","onPress","height","FooterView","Head","Html","meta","title"],"sourceRoot":""}